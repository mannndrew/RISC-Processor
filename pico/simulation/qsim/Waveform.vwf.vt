// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/18/2023 22:24:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pico
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pico_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [31:0] mem_rdata;
reg rst;
// wires                                               
wire [31:0] mem_addr;
wire mem_instr;
wire mem_valid;
wire [31:0] mem_wdata;
wire [3:0] mem_wstrb;

// assign statements (if any)                          
pico i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.mem_addr(mem_addr),
	.mem_instr(mem_instr),
	.mem_rdata(mem_rdata),
	.mem_valid(mem_valid),
	.mem_wdata(mem_wdata),
	.mem_wstrb(mem_wstrb),
	.rst(rst)
);
initial 
begin 
#10000000 $finish;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #100000 1'b1;
	clk = #100000 1'b0;
	clk = #100000 1'b1;
	# 100000;
	repeat(48)
	begin
		clk = 1'b0;
		clk = #100000 1'b1;
		# 100000;
	end
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #200000 1'b1;
end 
// mem_rdata[ 31 ]
initial
begin
	mem_rdata[31] = 1'b1;
end 
// mem_rdata[ 30 ]
initial
begin
	mem_rdata[30] = 1'b1;
end 
// mem_rdata[ 29 ]
initial
begin
	mem_rdata[29] = 1'b1;
end 
// mem_rdata[ 28 ]
initial
begin
	mem_rdata[28] = 1'b0;
end 
// mem_rdata[ 27 ]
initial
begin
	mem_rdata[27] = 1'b1;
end 
// mem_rdata[ 26 ]
initial
begin
	mem_rdata[26] = 1'b1;
end 
// mem_rdata[ 25 ]
initial
begin
	mem_rdata[25] = 1'b1;
end 
// mem_rdata[ 24 ]
initial
begin
	mem_rdata[24] = 1'b1;
end 
// mem_rdata[ 23 ]
initial
begin
	mem_rdata[23] = 1'b0;
end 
// mem_rdata[ 22 ]
initial
begin
	mem_rdata[22] = 1'b0;
end 
// mem_rdata[ 21 ]
initial
begin
	mem_rdata[21] = 1'b0;
end 
// mem_rdata[ 20 ]
initial
begin
	mem_rdata[20] = 1'b0;
end 
// mem_rdata[ 19 ]
initial
begin
	mem_rdata[19] = 1'b0;
end 
// mem_rdata[ 18 ]
initial
begin
	mem_rdata[18] = 1'b0;
end 
// mem_rdata[ 17 ]
initial
begin
	mem_rdata[17] = 1'b0;
end 
// mem_rdata[ 16 ]
initial
begin
	mem_rdata[16] = 1'b0;
end 
// mem_rdata[ 15 ]
initial
begin
	mem_rdata[15] = 1'b0;
end 
// mem_rdata[ 14 ]
initial
begin
	mem_rdata[14] = 1'b0;
end 
// mem_rdata[ 13 ]
initial
begin
	mem_rdata[13] = 1'b0;
end 
// mem_rdata[ 12 ]
initial
begin
	mem_rdata[12] = 1'b0;
end 
// mem_rdata[ 11 ]
initial
begin
	mem_rdata[11] = 1'b0;
end 
// mem_rdata[ 10 ]
initial
begin
	mem_rdata[10] = 1'b0;
end 
// mem_rdata[ 9 ]
initial
begin
	mem_rdata[9] = 1'b0;
end 
// mem_rdata[ 8 ]
initial
begin
	mem_rdata[8] = 1'b0;
end 
// mem_rdata[ 7 ]
initial
begin
	mem_rdata[7] = 1'b0;
end 
// mem_rdata[ 6 ]
initial
begin
	mem_rdata[6] = 1'b0;
end 
// mem_rdata[ 5 ]
initial
begin
	mem_rdata[5] = 1'b0;
end 
// mem_rdata[ 4 ]
initial
begin
	mem_rdata[4] = 1'b0;
end 
// mem_rdata[ 3 ]
initial
begin
	mem_rdata[3] = 1'b0;
end 
// mem_rdata[ 2 ]
initial
begin
	mem_rdata[2] = 1'b1;
end 
// mem_rdata[ 1 ]
initial
begin
	mem_rdata[1] = 1'b0;
end 
// mem_rdata[ 0 ]
initial
begin
	mem_rdata[0] = 1'b1;
end 
endmodule

